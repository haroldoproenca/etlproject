{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ETL Project","text":""},{"location":"#sobre-o-projeto","title":"Sobre o Projeto","text":"<p>Este reposit\u00f3rio \u00e9 uma parte integrante de estudos com ci\u00eancias de dados. O projeto \u00e9 inicial e simples, onde o foco \u00e9 aplicar as melhores pr\u00e1ticas que s\u00e3o gera\u00e7\u00e3o de documenta\u00e7\u00e3o, valida\u00e7\u00f5es de c\u00f3digos antes de commits, utiliza\u00e7\u00e3o de CI.</p>"},{"location":"#abordagens","title":"Abordagens:","text":"<ul> <li> <p>Estrutura do reposit\u00f3rio: Isso inclui a organiza\u00e7\u00e3o de diret\u00f3rios, como o c\u00f3digo-fonte, testes, documenta\u00e7\u00e3o, entre outros.</p> </li> <li> <p>Exemplo de ETL: Vamos criar um projeto utilizando classes, m\u00f3dulos e boas pr\u00e1ticas em um ETL.</p> </li> <li> <p>Familiarizar-se com ferramentas de desenvolvimento: Utilizaremmos PIP e POETRY neste projeto.</p> </li> <li> <p>Testes com Pytest: Testes unit\u00e1rios e de integra\u00e7\u00e3o, para garantir que seu c\u00f3digo funcione como esperado.</p> </li> <li> <p>Versionamento com Git e GitHub: Versionamentoo do projeto e uso o GitHub para colabora\u00e7\u00e3o e publica\u00e7\u00e3o.</p> </li> <li> <p>Documenta\u00e7\u00e3o com MKDocs: Documenta\u00e7\u00e3o com MKDocs e a publica\u00e7\u00e3o da documenta\u00e7\u00e3o no GitHub Pages.</p> </li> <li> <p>Automatiza\u00e7\u00e3o e CI/CD: Configura\u00e7\u00e3o de rotinas de integra\u00e7\u00e3o e entrega cont\u00ednua para manter a qualidade do projeto.</p> </li> </ul>"},{"location":"#comecando","title":"Come\u00e7ando","text":""},{"location":"#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Voc\u00ea deve ter o Python instalado em sua m\u00e1quina. Este projeto foi desenvolvido utilizando Python 3.12, mas \u00e9 compat\u00edvel com vers\u00f5es desde a 3.11 at\u00e9 a 3.13.</p>"},{"location":"#instalacao-e-configuracao","title":"Instala\u00e7\u00e3o e Configura\u00e7\u00e3o","text":"<ol> <li>Clone o reposit\u00f3rio:</li> </ol> <pre><code>git clone https://github.com/haroldoproenca/etlproject.git\ncd etlproject\n</code></pre> <ol> <li>Instale as depend\u00eancias do projeto usando Poetry:</li> </ol> <pre><code>poetry install\n</code></pre> <ol> <li>Ative o ambiente virtual:</li> </ol> <pre><code>poetry shell\n</code></pre> <ol> <li>Execute os testes para garantir que tudo est\u00e1 funcionando como esperado:</li> </ol> <pre><code>pytest\n</code></pre>"},{"location":"#contato","title":"Contato","text":"<ul> <li>Haroldo Proen\u00e7a - haroldoproenca@gmail.com</li> </ul>"},{"location":"linkedin/","title":"Linkedin","text":"<p>Haroldo Proen\u00e7a's Prrofile: https://www.linkedin.com/in/haroldoproenca/</p> <p>Devops4Fun Brazil Profile: https://www.linkedin.com/company/97855675/admin/inbox/</p>"},{"location":"getting-started/extract/","title":"ETL Pipeline","text":"<p>Abaixo, voc\u00ea encontrar\u00e1 detalhes sobre as fun\u00e7\u00f5es e m\u00f3dulos do nosso projeto.</p>"},{"location":"getting-started/extract/#extract","title":"<code>Extract</code>","text":"<p>Read all Excel files.</p> <p>Read all Excel files in a given directory and return a list of DataFrames.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>str</code> <p>The path to the directory containing Excel files.</p> required"},{"location":"getting-started/extract/#etlproject.pipeline.extract.extract_dataframes_from_excel--returns","title":"Returns","text":"<pre><code>List[pd.DataFrame]: A list of DataFrames, each representing an Excel file.\n</code></pre> Source code in <code>etlproject/pipeline/extract.py</code> <pre><code>def extract_dataframes_from_excel(input_path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"Read all Excel files.\n\n    Read all Excel files in a given directory and return a list of DataFrames.\n\n    Args:\n        input_path (str): The path to the directory containing Excel files.\n\n    Returns\n    -------\n        List[pd.DataFrame]: A list of DataFrames, each representing an Excel file.\n\n    \"\"\"\n    # Constr\u00f3i o caminho de busca e encontra todos os arquivos Excel no diret\u00f3rio.\n    excel_files = glob.glob(os.path.join(input_path, \"*.xlsx\"))\n    # Usa compreens\u00e3o de lista para ler cada arquivo Excel e colet\u00e1-los em uma lista.\n    try:\n        data_frames = [pd.read_excel(file) for file in excel_files]\n    except Exception as e:\n        # Tratamento de exce\u00e7\u00f5es para lidar com erros ao ler os arquivos Excel.\n        print(f\"An error occurred: {e}\")\n        data_frames = []\n\n    return data_frames\n</code></pre>"},{"location":"getting-started/load/","title":"ETL Pipeline","text":"<p>Abaixo, voc\u00ea encontrar\u00e1 detalhes sobre as fun\u00e7\u00f5es e m\u00f3dulos do nosso projeto.</p>"},{"location":"getting-started/load/#load","title":"<code>Load</code>","text":"<p>Save Dataframe.</p> <p>Save a given DataFrame to an Excel file.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame</code> <code>DataFrame</code> <p>DataFrame to be saved to Excel.</p> required <code>output_path</code> <code>str</code> <p>Path where the Excel file will be saved.</p> required <code>file_name</code> <code>str</code> <p>Name of the Excel file to be saved.</p> required"},{"location":"getting-started/load/#etlproject.pipeline.load.save_dataframe_to_excel--returns","title":"Returns","text":"<pre><code>NoReturn: This function does not return anything.\n</code></pre> Source code in <code>etlproject/pipeline/load.py</code> <pre><code>def save_dataframe_to_excel(\n    data_frame: pd.DataFrame, output_path: str, file_name: str\n) -&gt; NoReturn:\n    \"\"\"Save Dataframe.\n\n    Save a given DataFrame to an Excel file.\n\n    Args:\n        data_frame (pd.DataFrame): DataFrame to be saved to Excel.\n        output_path (str): Path where the Excel file will be saved.\n        file_name (str): Name of the Excel file to be saved.\n\n    Returns\n    -------\n        NoReturn: This function does not return anything.\n\n    \"\"\"\n    complete_path = os.path.join(output_path, f\"{file_name}.xlsx\")\n    os.makedirs(output_path, exist_ok=True)\n    with pd.ExcelWriter(complete_path, engine=\"openpyxl\") as writer:\n        data_frame.to_excel(writer, index=False)\n    print(\"File saved successfully.\")\n</code></pre>"},{"location":"getting-started/transform/","title":"ETL Pipeline","text":"<p>Abaixo, voc\u00ea encontrar\u00e1 detalhes sobre as fun\u00e7\u00f5es e m\u00f3dulos do nosso projeto.</p>"},{"location":"getting-started/transform/#transform","title":"<code>Transform</code>","text":"<p>Concatenate Dataframes.</p> <p>Concatenate a list of pandas DataFrames into a single DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame_list</code> <code>List[DataFrame]</code> <p>List of DataFrames to concatenate.</p> required"},{"location":"getting-started/transform/#etlproject.pipeline.transform.concat_data_frames--returns","title":"Returns","text":"<pre><code>pd.DataFrame: The concatenated DataFrame if the list is not empty, None otherwise.\n</code></pre> Source code in <code>etlproject/pipeline/transform.py</code> <pre><code>def concat_data_frames(\n    data_frame_list: List[pd.DataFrame],\n) -&gt; Union[pd.DataFrame, None]:\n    \"\"\"Concatenate Dataframes.\n\n    Concatenate a list of pandas DataFrames into a single DataFrame.\n\n    Args:\n        data_frame_list (List[pd.DataFrame]): List of DataFrames to concatenate.\n\n    Returns\n    -------\n        pd.DataFrame: The concatenated DataFrame if the list is not empty, None otherwise.\n\n    \"\"\"\n    if not data_frame_list:  # Verifica se a lista est\u00e1 vazia\n        print(\"The provided list of DataFrames is empty.\")\n        return None\n\n    try:\n        # Concatena os DataFrames, ignorando os \u00edndices originais.\n        return pd.concat(data_frame_list, ignore_index=True)\n    except ValueError as e:\n        # Tratamento de exce\u00e7\u00f5es para lidar com erros durante a concatena\u00e7\u00e3o.\n        print(f\"An error occurred while concatenating DataFrames: {e}\")\n        return None\n</code></pre>"}]}